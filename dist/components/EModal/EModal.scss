@import '../../theme/imports';

$component: c('EModal');
$teleport: p('ETeleportTarget');

##{$teleport}[data-modal-active='true'] .#{$component}-outside {
  pointer-events: all;
  opacity: 1;
}

@mixin size($suffix, $size) {
  &.#{$component}--#{$suffix} .#{$component}-inner {
    max-width: $size;
  }
}

.#{$component}-outside {
  pointer-events: none;
  background-color: rgba(0, 0, 0, 0.692);
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: calc(v(z-index, $component) - 1);

  opacity: 0;
  transition: all v(transition-time) ease;
}

.#{$component} {
  overflow: hidden;
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: v(z-index, $component);
  pointer-events: none;

  line-height: v(line-height, $component);

  &.#{$component}--visible {
    .#{$component}-inner {
      opacity: 1;
      transform: translateY(0);

      .#{$component}-content {
        pointer-events: all;
      }
    }
  }

  .#{$component}-inner {
    position: relative;
    display: flex;
    align-items: center;
    margin: 1.75rem auto;
    min-height: calc(100% - (1.75rem * 2));
    opacity: 0;
    transition: all v(transition-time) ease;
    transform: translateY(-10px);
    padding: 0 v(spacing-sm);
    pointer-events: none;

    .#{$component}-content {
      width: 100%;
      display: flex;
      flex-direction: column;
      border-radius: v(border-radius, c('EModal'));
      background-color: v(background-color, c('EModal'));
      border: v(border-width) solid v(border-color);
      max-height: 80vh;

      .#{$component}-header {
        display: flex;
        padding: v(spacing-md);
        border-bottom: v(border-width) solid v(border-color);
        column-gap: v(
          spacing-md
        ); // Gap between title/desscription and close button.

        :first-child {
          flex: 1;
        }

        .#{$component}-title {
          display: flex;
          margin: 0;

          font-size: v(title-font-size, $component);
          font-weight: v(font-weight-semibold);
          line-height: calc(v(title-font-size, $component) * 1.33);
        }

        .#{$component}-description {
          display: flex;
          margin-top: v(spacing-xs);

          color: v(description-text-color, $component);
          font-size: v(description-font-size, $component);
          line-height: v(line-height);
        }

        .#{$component}-close {
          display: flex;
          justify-content: center;
          align-items: center;

          $button-size: calc(v(title-font-size, $component) * 1.33);

          width: $button-size;
          height: $button-size;
          margin: 0;

          border-radius: v(border-radius, $component);

          border: none;
          background-color: transparent;

          font-size: v(font-size);
          flex-shrink: 0;

          outline: none;
          border: none;
          color: inherit;

          transition:
            background-color v(transition-time) v(transition-type),
            box-shadow v(transition-time) v(transition-type);
          cursor: pointer;

          &:hover {
            background-color: v(background-color--hover);
            color: v(text-color--hover);
          }

          &:active {
            background-color: v(background-color--active);
            color: v(text-color--active);
          }

          &:focus {
            background-color: v(background-color--focus);
            color: v(text-color--focus);

            box-shadow: 0 0 0 v(focus-shadow-size)
              variant(primary, box-shadow-color);
          }
        }

        + div + .#{$component}-footer {
          // Remove top border if there is no body.
          // The 'div' is there to accommodate the focus target.
          border-top: none;
        }
      }

      .#{$component}-body {
        padding: v(spacing-md);
        max-height: calc(100vh - 108px - 3.5rem);
        flex: 1;
        overflow-y: auto;

        &.#{$component}-body--raw {
          padding: 0;
        }

        + .#{$component}-footer {
          border-top: v(border-width) solid v(border-color);
        }
      }

      .#{$component}-footer {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: v(spacing-md);

        border-bottom-left-radius: v(border-radius, $component);
        border-bottom-right-radius: v(border-radius, $component);
      }
    }
  }

  @include size('md', v(size, $component));
  @include size('sm', v(size-sm, $component));
  @include size('lg', v(size-lg, $component));

  &.#{$component}--reject-close {
    animation: e-shake 0.5s ease;
  }
}

@keyframes e-shake {
  10%,
  90% {
    transform: translate3d(-1px, 0, 0);
  }

  20%,
  80% {
    transform: translate3d(2px, 0, 0);
  }

  30%,
  50%,
  70% {
    transform: translate3d(-4px, 0, 0);
  }

  40%,
  60% {
    transform: translate3d(4px, 0, 0);
  }
}
