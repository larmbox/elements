@use 'sass:math';
@import '../../theme/imports';

$form: c('EFormInput');
$component: c('ERadio');

@mixin variants {
  @each $variant in $variants {
    &.#{$component}--#{$variant} {
      &.#{$form}--highlight {
        input + .#{$component}-target {
          border-color: variant($variant, border-color);
        }
      }

      input {
        &:checked + .#{$component}-target {
          border-color: variant($variant, border-color);

          .#{$component}-inner-target {
            background-color: variant($variant, background-color);
            color: variant($variant, color); // No effect.
          }
        }

        &:focus + .#{$component}-target {
          border-color: variant($variant, border-color, focus);
          box-shadow: 0
            0
            0
            v(focus-shadow-size)
            variant($variant, box-shadow-color);
        }

        &:disabled:checked + .#{$component}-target {
          border-color: variant($variant, border-color, disabled);

          .#{$component}-inner-target {
            background-color: variant($variant, background-color, disabled);
            color: variant($variant, color); // No effect.
          }
        }
      }
    }
  }
}

.#{$component} {
  display: inline-flex;
  position: relative;
  align-items: center;

  // https://stackoverflow.com/questions/48117071/element-with-display-inline-flex-has-a-strange-top-margin
  vertical-align: middle;
  line-height: v(line-height, $component);

  @include variants;

  &.#{$component}--block {
    display: flex;
    width: 100%;
  }

  .#{$component}-target {
    display: flex;
    align-items: center;
    flex-shrink: 0;

    width: v(size, $component);
    height: v(size, $component);

    padding: calc(v(size, $component) * 0.16667);

    background-color: v(background-color, $component);
    border: v(border-width, $component) solid v(border-color, $component);
    border-radius: v(border-radius, $component);

    transition:
      border-color v(transition-time) v(transition-type),
      background-color v(transition-time) v(transition-type),
      box-shadow v(transition-time) v(transition-type);

    .#{$component}-inner-target {
      width: 100%;
      height: 100%;
      border-radius: v(border-radius, $component);
      transition: background-color v(transition-time) v(transition-type);
    }
  }

  .#{$component}-inner {
    > div:first-of-type {
      display: flex;

      .#{c('EFormLabel')} {
        display: block;
        padding-bottom: 0;
        padding-left: v(spacing-xs);

        // Aligns the first line of the label with the radio target.
        margin-top: calc(
          (v(line-height, $component) * 1em - v(size, $component)) / 2 * -1
        );
      }
    }

    .#{$component}-context {
      margin-left: calc(v(size, $component) + v(spacing-xs));
    }
  }

  input {
    position: absolute;
    width: v(size, $component);
    height: v(size, $component);
    margin: 0;
    opacity: 0;
    z-index: 1;

    &:disabled:not(:checked) + .#{$component}-target {
      background-color: v(background-color--disabled, $component);
      border-color: v(border-color--disabled, $component);
    }
  }

  &.#{$form}--highlight.#{$form}--feedback {
    input {
      &:not(:checked) + .#{$component}-target {
        border-color: variant(feedback, border-color);
      }

      &:not(:checked):not(:disabled):not(:focus):hover + .#{$component}-target {
        border-color: variant(feedback, border-color, hover);
      }

      &:not(:checked):not(:disabled):active + .#{$component}-target {
        border-color: variant(feedback, border-color, active);
      }

      &:not(:checked):focus + .#{$component}-target {
        border-color: variant(feedback, border-color, hover);
      }

      &:not(:checked):disabled + .#{$component}-target {
        border-color: variant(feedback, border-color, disabled);
      }
    }
  }
}
