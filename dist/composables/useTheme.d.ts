import { Config } from '../create-elements';
export interface Theme {
    name: string;
    variables: Record<string, string | number>;
}
export declare function useTheme(config: Config): {
    theme: import("vue").Ref<string>;
    providers: import("vue").Ref<{
        id: string;
        content: string;
    }[]>;
    components: import("vue").Ref<Record<string, Record<string, string | number>>>;
    destroy: (id?: string) => void;
    render: (id?: string, override?: string) => void;
    registerComponentStyle: (name: string, variables: Theme['variables']) => void;
    registerTheme: ({ name, variables }: Theme) => void;
    setTheme: (name: string) => void;
};
export declare const common: {
    spacing: string;
    'spacing-xs': string;
    'spacing-sm': string;
    'spacing-md': string;
    'spacing-lg': string;
    'spacing-xl': string;
    'font-weight-light': number;
    'font-weight-normal': number;
    'font-weight-medium': number;
    'font-weight-semibold': number;
    'font-weight-bold': number;
    'font-size': string;
    'font-size-sm': string;
    'font-size-md': string;
    'font-size-lg': string;
    'line-height': number;
    'box-shadow': string;
    'focus-shadow-size': string;
    'transition-time': string;
    'transition-type': string;
    'border-radius': string;
    'border-width': string;
    'border-color': string;
    'border-color--hover': string;
    'border-color--focus': string;
    'border-color--disabled': string;
    'placeholder-color': string;
    'placeholder-color--hover': string;
    'placeholder-color--focus': string;
    'placeholder-color--disabled': string;
    'text-color': string;
    'text-color--light': string;
    'text-color--hover': string;
    'text-color--focus': string;
    'text-color--disabled': string;
    'contrast-color': string;
    'contrast-color--hover': string;
    'contrast-color--focus': string;
    'contrast-color--disabled': string;
    'background-color': string;
    'background-color--hover': string;
    'background-color--focus': string;
    'background-color--active': string;
    'background-color--disabled': string;
    'body-color': string;
    'primary-color': string;
    'primary-color--hover': string;
    'primary-color--focus': string;
    'primary-color--active': string;
    'primary-color--disabled': string;
    'primary-background-color': string;
    'primary-background-color--hover': string;
    'primary-background-color--focus': string;
    'primary-background-color--active': string;
    'primary-background-color--disabled': string;
    'primary-border-color': string;
    'primary-border-color--hover': string;
    'primary-border-color--focus': string;
    'primary-border-color--active': string;
    'primary-border-color--disabled': string;
    'primary-box-shadow-color': string;
    'primary-contrast-color': string;
    'primary-contrast-color--disabled': string;
    'feedback-color': string;
    'feedback-color--hover': string;
    'feedback-color--focus': string;
    'feedback-color--active': string;
    'feedback-color--disabled': string;
    'feedback-background-color': string;
    'feedback-background-color--hover': string;
    'feedback-background-color--focus': string;
    'feedback-background-color--active': string;
    'feedback-background-color--disabled': string;
    'feedback-border-color': string;
    'feedback-border-color--hover': string;
    'feedback-border-color--focus': string;
    'feedback-border-color--active': string;
    'feedback-border-color--disabled': string;
    'feedback-box-shadow-color': string;
    'feedback-contrast-color': string;
    'feedback-contrast-color--disabled': string;
};
