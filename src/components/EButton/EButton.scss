@import '../../theme/imports';

$component: c('EButton');
$loading: c('ELoading');

@mixin variants {
  @each $variant in $variants {
    &.#{$component}--#{$variant} {
      background-color: variant($variant, 'background-color');
      border-color: variant($variant, 'border-color');
      color: variant($variant, 'contrast-color');

      &:not(:disabled):not(:focus):hover {
        background-color: variant($variant, 'background-color', 'hover');
        border-color: variant($variant, 'border-color', 'hover');
      }

      &:not(:disabled):active {
        background-color: variant($variant, 'background-color', 'active');
        border-color: variant($variant, 'border-color', 'active');
      }

      &:focus {
        background-color: variant($variant, 'background-color', 'focus');
        border-color: variant($variant, 'border-color', 'focus');
        box-shadow: 0
          0
          0
          v(focus-shadow-size)
          variant($variant, 'box-shadow-color');
      }

      &:disabled {
        background-color: variant($variant, 'background-color', 'disabled');
        border-color: variant($variant, 'border-color', 'disabled');
        color: variant($variant, 'contrast-color', 'disabled');
      }
    }
  }
}

.#{$component} {
  position: relative;
  display: inline-flex;
  justify-content: center;
  padding: v(padding-y, $component) v(padding-x, $component);

  border-style: solid;
  border-width: v(border-width, $component);
  border-radius: v(border-radius, $component);

  white-space: nowrap;
  line-height: v(line-height, $component);
  text-align: center;
  text-decoration: none;
  font-family: inherit;
  font-weight: v(font-weight, $component);
  font-size: v(font-size, $component);

  transition:
    background-color v(transition-time) v(transition-type),
    color v(transition-time) v(transition-type),
    border-color v(transition-time) v(transition-type),
    box-shadow v(transition-time) v(transition-type);
  cursor: pointer;

  @include variants;

  &:disabled {
    cursor: default;
  }

  &:focus {
    outline: none;
  }

  .#{$component}-content {
    display: flex;
    align-items: center;
    column-gap: v(spacing-xs);
  }

  &.#{$component}--block {
    display: flex;
    min-width: 100%;
  }

  &.#{$component}--loading {
    align-items: center;

    .#{$loading} {
      position: absolute;
    }

    .#{$component}-content {
      // Hide button content when loading.
      visibility: hidden;
      opacity: 0;
    }
  }
}
